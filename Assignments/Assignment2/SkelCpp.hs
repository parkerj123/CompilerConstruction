module SkelCpp where

-- Haskell module generated by the BNF converter

import AbsCpp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog functions -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  Func type_ ident decls stms -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  Decl type_ idents -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SDecl decl -> failure x
  SExp exp -> failure x
  SBlock stms -> failure x
  SWhile exps stms -> failure x
  SReturn exp -> failure x
  SUsing stm -> failure x
  SConst name -> failure x
  SOut outs -> failure x
  SIn ins -> failure x
  SIf exp stms -> failure x
transName :: Name -> Result
transName x = case x of
  Name exp ident -> failure x
transOut :: Out -> Result
transOut x = case x of
  Out name -> failure x
  OutExp exp -> failure x
transIn :: In -> Result
transIn x = case x of
  In name -> failure x
  InExp exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EFunc ident1 ident2 exps -> failure x
  EAss ident exp -> failure x
  ELess exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  ESR exp1 exp2 -> failure x
  ESL exp1 exp2 -> failure x
  EType ident exps -> failure x
  EIdent ident -> failure x
  EStr string -> failure x
  EInt integer -> failure x
  EDoub double -> failure x
  ETStd type_1 exps type_2 ident -> failure x
  EQues exp1 exp2 exp3 -> failure x
  EEquiv exp1 exp2 -> failure x
  EArr ident exp -> failure x
  EAmp ident -> failure x
  EExcl exp -> failure x
  ELesEq exp1 exp2 -> failure x
  EGreEq exp1 exp2 -> failure x
  EPoint ident -> failure x
  EAnd exp1 exp2 -> failure x
  EArrow exp1 exp2 -> failure x
  EPreInc exp -> failure x
  EOr exp1 exp2 -> failure x
  ETy type_ exp -> failure x
transType :: Type -> Result
transType x = case x of
  Type -> failure x

