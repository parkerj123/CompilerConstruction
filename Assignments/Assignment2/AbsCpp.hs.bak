

module AbsCpp where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [Function]
  deriving (Eq, Ord, Show, Read)

data Function = Func Type Ident [Decl] [Stm]
  deriving (Eq, Ord, Show, Read)

data Decl = Decl Type [Ident]
  deriving (Eq, Ord, Show, Read)

data Stm
    = SDecl Decl
    | SExp Exp
    | SBlock [Stm]
    | SWhile [Exp] [Stm]
    | SReturn Exp
    | SUsing Stm
    | SConst Name
    | SOut [Out]
    | SIn [In]
    | SIf Exp [Stm]
  deriving (Eq, Ord, Show, Read)

data Name = Name Exp Ident
  deriving (Eq, Ord, Show, Read)

data Out = Out Name | OutExp Exp
  deriving (Eq, Ord, Show, Read)

data In = In Name | InExp Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EFunc Ident Ident [Exp]
    | EAss Ident Exp
    | ELess Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | ESR Exp Exp
    | ESL Exp Exp
    | EType Ident [Exp]
    | EIdent Ident
    | EStr String
    | EInt Integer
    | EDoub Double
    | ETStd Type [Exp] Type Ident
    | ETS Type Ident
    | EQues Exp Exp Exp
    | EEquiv Exp Exp
    | EArr Ident Exp
    | EAmp Ident
    | EExcl Exp
    | ELesEq Exp Exp
    | EGreEq Exp Exp
    | EPoint Ident
    | EAnd Exp Exp
    | EArrow Exp Exp
    | EPreInc Exp
    | EOr Exp Exp
    | ETy Type Exp
  deriving (Eq, Ord, Show, Read)

data Type = Type
  deriving (Eq, Ord, Show, Read)

