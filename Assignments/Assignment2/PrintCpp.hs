{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintCpp.
--   Generated by the BNF converter.

module PrintCpp where

import qualified AbsCpp
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsCpp.Ident where
  prt _ (AbsCpp.Ident i) = doc (showString i)
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print AbsCpp.Program where
  prt i e = case e of
    AbsCpp.Prog functions -> prPrec i 0 (concatD [prt 0 functions])

instance Print AbsCpp.Function where
  prt i e = case e of
    AbsCpp.Func type_ id decls stms -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 decls, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsCpp.Decl where
  prt i e = case e of
    AbsCpp.Decl type_ ids -> prPrec i 0 (concatD [prt 0 type_, prt 0 ids])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsCpp.Function] where
  prt = prtList

instance Print [AbsCpp.Stm] where
  prt = prtList

instance Print [AbsCpp.Decl] where
  prt = prtList

instance Print [AbsCpp.Ident] where
  prt = prtList

instance Print [AbsCpp.Out] where
  prt = prtList

instance Print [AbsCpp.In] where
  prt = prtList

instance Print AbsCpp.Stm where
  prt i e = case e of
    AbsCpp.SDecl decl -> prPrec i 0 (concatD [prt 0 decl, doc (showString ";")])
    AbsCpp.SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    AbsCpp.SBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    AbsCpp.SWhile exps stms -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exps, doc (showString ")"), prt 0 stms])
    AbsCpp.SReturn exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    AbsCpp.SUsing stm -> prPrec i 0 (concatD [doc (showString "using"), prt 0 stm, doc (showString ";")])
    AbsCpp.SConst name -> prPrec i 0 (concatD [prt 0 name, doc (showString ";")])
    AbsCpp.SOut outs -> prPrec i 0 (concatD [prt 0 outs, doc (showString ";")])
    AbsCpp.SIn ins -> prPrec i 0 (concatD [prt 0 ins, doc (showString ";")])
    AbsCpp.SIf exp stms -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), doc (showString "{"), prt 0 stms, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsCpp.Name where
  prt i e = case e of
    AbsCpp.Name exp id -> prPrec i 0 (concatD [prt 0 exp, doc (showString "::"), prt 0 id])

instance Print AbsCpp.Out where
  prt i e = case e of
    AbsCpp.Out name -> prPrec i 0 (concatD [prt 0 name])
    AbsCpp.OutExp exp -> prPrec i 0 (concatD [prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "<<"), prt 0 xs]

instance Print AbsCpp.In where
  prt i e = case e of
    AbsCpp.In name -> prPrec i 0 (concatD [prt 0 name])
    AbsCpp.InExp exp -> prPrec i 0 (concatD [prt 0 exp])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ">>"), prt 0 xs]

instance Print AbsCpp.Exp where
  prt i e = case e of
    AbsCpp.EFunc id1 id2 exps -> prPrec i 0 (concatD [prt 0 id1, doc (showString "."), prt 0 id2, doc (showString "("), prt 0 exps, doc (showString ")"), doc (showString ";")])
    AbsCpp.EAss id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
    AbsCpp.ELess exp1 exp2 -> prPrec i 1 (concatD [prt 2 exp1, doc (showString "<"), prt 2 exp2])
    AbsCpp.EAdd exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "+"), prt 3 exp2])
    AbsCpp.ESub exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "-"), prt 3 exp2])
    AbsCpp.EMul exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "*"), prt 4 exp2])
    AbsCpp.ESR exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ">>"), prt 0 exp2])
    AbsCpp.ESL exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<<"), prt 0 exp2])
    AbsCpp.EType id exps -> prPrec i 4 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])
    AbsCpp.EIdent id -> prPrec i 4 (concatD [prt 0 id])
    AbsCpp.EStr str -> prPrec i 4 (concatD [prt 0 str])
    AbsCpp.EInt n -> prPrec i 4 (concatD [prt 0 n])
    AbsCpp.EDoub d -> prPrec i 4 (concatD [prt 0 d])
    AbsCpp.ETStd type_1 exps type_2 id -> prPrec i 0 (concatD [prt 0 type_1, prt 0 exps, doc (showString "::"), prt 0 type_2, doc (showString "::size_type"), prt 0 id])
    AbsCpp.EQues exp1 exp2 exp3 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "?"), prt 0 exp2, doc (showString ":"), prt 0 exp3])
    AbsCpp.EEquiv exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "=="), prt 0 exp2])
    AbsCpp.EArr id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "["), prt 0 exp, doc (showString "]")])
    AbsCpp.EAmp id -> prPrec i 0 (concatD [prt 0 id, doc (showString "&")])
    AbsCpp.EExcl exp -> prPrec i 0 (concatD [doc (showString "!"), prt 0 exp])
    AbsCpp.ELesEq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<="), prt 0 exp2])
    AbsCpp.EGreEq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ">="), prt 0 exp2])
    AbsCpp.EPoint id -> prPrec i 0 (concatD [doc (showString "*"), prt 0 id])
    AbsCpp.EAnd exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "&&"), prt 0 exp2])
    AbsCpp.EArrow exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "->"), prt 0 exp2])
    AbsCpp.EPreInc exp -> prPrec i 0 (concatD [doc (showString "++"), prt 0 exp])
    AbsCpp.EOr exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "||"), prt 0 exp2])
    AbsCpp.ETy type_ exp -> prPrec i 0 (concatD [prt 0 type_, prt 0 exp])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsCpp.Exp] where
  prt = prtList

instance Print AbsCpp.Type where
  prt i e = case e of
    AbsCpp.Type -> prPrec i 0 (concatD [doc (showString "int")])

